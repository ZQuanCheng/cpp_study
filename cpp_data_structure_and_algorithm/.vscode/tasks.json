{
    "version":"2.0.0",
    "options": {
        "cwd": "${workspaceFolder}/build"    // cwd:current working directory当前工作目录。相当于在命令行执行 cd /home/zqc/projects/cpp_study/cpp_cmake_template/bulid 
    },
    "tasks": [                      // 三个tasks
        {
            "type": "shell",        // open the shell 打开终端
            "label": "cmake",
            // 执行命令 cmake ..
            "command": "cmake",
            "args": [
                ".."
            ]
        },
        {
            "label": "make",
            "group": "build",
            "command": "make",      // 执行命令make
            "args": [
            ]
        },
        {
            "label": "Build",
            "dependsOrder": "sequence",
            "dependsOn":[
                "cmake",
                "make"
            ]
        }
    ],
}
    // --------------------------------------------------------------------
    // 可以通过鼠标悬停在关键字（键名）上，查看官方解释。
    
    // 如下是可能出现在 tasks.json, launch.json 中的变量 
    // ${workspaceFolder} - 在 VS Code 中打开的文件夹的路径。这里表示/home/zqc/projects/helloworld
    // ${fileDirname} - 当前打开文件的文件夹路径。如果当前打开的是tasks.json，则表示/home/zqc/projects/helloworld/.vscode
    // ${file} - 当前打开的文件。如果当前打开的是tasks.json，${file}就表示的当前tasks.json的绝对路径：/home/zqc/projects/helloworld/.vscode/tasks.json
    // ${fileBasenameNoExtension} - 当前打开的文件的基本名称，没有文件扩展名：如果我当前打开的是tasks.json, ${fileBasenameNoExtension}就是tasks
    // ${cwd} - 启动 VS Code 时任务运行器task runner的当前工作目录: 这里是/home/zqc/projects/helloworld
    
    // VSCODE中各种预定义变量汇总https://blog.csdn.net/endurehero/article/details/80100991
    // 如何知道一个变量的实际值？？？ https://blog.csdn.net/Hello_Ray/article/details/123522502
    // 更多变量看官方文档（https://code.visualstudio.com/docs/editor/variables-reference）；


    // --------------------------------------------------------------------
    // 覆盖cwd（当前工作目录current working directory）、env（环境变量environment variables）或shell（default shell）的默认值。
    // 选项可以按任务设置，也可以全局或按平台设置。此处配置的环境变量只能从您的任务脚本或流程中引用，如果它们是您的 args、命令或其他任务属性的一部分，则不会被解析。
    // "options": {
        // "cwd": "${workspaceFolder}/build"
        // 目标工作目录，
        // 相当于命令行cd /home/zqc/projects/cpp_study/cpp_cmake_template/bulid 
    // },


    // --------------------------------------------------------tasks.json定义了三个任务task-------------------------------------------

    // --------------------------------------------------------第一个task-------------------------------------------
    // "type": "shell",                    
    // c/c++ extension定义的task类型.  
    // 有的教程是 "type": "shell"  https://zhuanlan.zhihu.com/p/92175757/）
    // 有的教程是 "type": "cppbuild"
    // 这里改成shell，可以看到编译命令 https://blog.csdn.net/weixin_39956356/article/details/111300674
    // 对于自定义任务，这可以是shell或process。如果shell指定，该命令将被解释为 shell 命令（例如：bash、cmd 或 PowerShell）。如果process指定，命令将被解释为要执行的进程。


    // "label": "cmake" 
    // 用户界面中使用的任务标签。  
    // 任务的名字，注意是大小写区分的，会在launch中调用.需要与launch.json中的preLaunchTask保持一致 //该值将在task list中看到；你可以随意命名。 

    // "command": "cmake",               
    // 要执行的实际命令。  
    // command设置，指定要运行的程序 cmake

    // "args": [".."]                                  
    // args数组指定命令行参数，这些参数将传递给 cmake 。// 这些参数必须按照编译器期望的顺序指定。

    // 所以 第一个tasks.json实际上就相当于命令行cmake ..

    // --------------------------------------------------------第二个task-------------------------------------------
    // "label": "make",
    // 用户界面中使用的任务标签。 不重要

    // "group": "build",
    // 定义任务属于哪个组。
    
    // "command": "make",      // 执行命令make
    // "args": []              //无参数
    
    // 第二个tasks.json实际上就相当于命令行make

    // --------------------------------------------------------第三个task-------------------------------------------
    // "label": "Build"
    // 用户界面中使用的任务标签。 不重要

    // "dependsOrder": "sequence"

    // "dependsOn":["cmake", "make"]